{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "40UD_lGT1Yj49d3v6DnZu",
      "type": "text",
      "x": 277,
      "y": 134,
      "width": 461,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1958908999,
      "version": 181,
      "versionNonce": 849474025,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672399031738,
      "link": null,
      "locked": false,
      "text": "Day 9 Part One - Rope Bridge",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27,
      "containerId": null,
      "originalText": "Day 9 Part One - Rope Bridge"
    },
    {
      "id": "Rn44WqnINX9crgY5051WN",
      "type": "text",
      "x": 274,
      "y": 200.5,
      "width": 540,
      "height": 288,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 466922633,
      "version": 521,
      "versionNonce": 981531783,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672403010013,
      "link": null,
      "locked": false,
      "text": "Keep track of the tail's path and count how\nmany squares in the grid it visited.\n\n- Duplicate visits count as 1 visit\n- The tail follows the head as it moves around\n- If the tail is adjacent to the head it does\nnot move. This includes diagonals\n- If the head is not adjacent with the tail \nafter it's move, the tail moves in that\ndirection\n- The head can overlap the tail, ie be on the\nsame square",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 283,
      "containerId": null,
      "originalText": "Keep track of the tail's path and count how\nmany squares in the grid it visited.\n\n- Duplicate visits count as 1 visit\n- The tail follows the head as it moves around\n- If the tail is adjacent to the head it does\nnot move. This includes diagonals\n- If the head is not adjacent with the tail \nafter it's move, the tail moves in that\ndirection\n- The head can overlap the tail, ie be on the\nsame square"
    },
    {
      "id": "2ebcJocTtm-uy4w9vPJdW",
      "type": "text",
      "x": 273,
      "y": 538.5,
      "width": 182,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1119190921,
      "version": 67,
      "versionNonce": 218814855,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672400074972,
      "link": null,
      "locked": false,
      "text": "Assumptions",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27,
      "containerId": null,
      "originalText": "Assumptions"
    },
    {
      "id": "_P64HoFuwipQuJLKCgKPO",
      "type": "text",
      "x": 278,
      "y": 596.5,
      "width": 552,
      "height": 360,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1395369959,
      "version": 1632,
      "versionNonce": 1973341609,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672402156388,
      "link": null,
      "locked": false,
      "text": "- Need to have a function which checks whether \nthe head is adjacent to the tail\n- Each square the tail passes on its way\ntowards the head counts as a square visited\n- The grid seems to be liquid, eg in the input \ndata some directions are like Left 19. Maybe \nan extra step is needed to determine size of \ngrid?\n- For above could we explore the idea of not\nhaving a grid but maybe a history of steps\ncounting from the starting point zero?\n- A grid is not as simple either as the \ndirections does not necessarily give us the \nsize of it since it moves relatively from its\nstarting point ",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 355,
      "containerId": null,
      "originalText": "- Need to have a function which checks whether \nthe head is adjacent to the tail\n- Each square the tail passes on its way\ntowards the head counts as a square visited\n- The grid seems to be liquid, eg in the input \ndata some directions are like Left 19. Maybe \nan extra step is needed to determine size of \ngrid?\n- For above could we explore the idea of not\nhaving a grid but maybe a history of steps\ncounting from the starting point zero?\n- A grid is not as simple either as the \ndirections does not necessarily give us the \nsize of it since it moves relatively from its\nstarting point "
    },
    {
      "id": "18t6tliphYAIegERIh1TW",
      "type": "text",
      "x": 989,
      "y": 121.5,
      "width": 297,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1812714215,
      "version": 270,
      "versionNonce": 159150857,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672402992941,
      "link": null,
      "locked": false,
      "text": "The Compass Method",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27,
      "containerId": null,
      "originalText": "The Compass Method"
    },
    {
      "id": "z88bl5AXY-ZATTYdAsurc",
      "type": "text",
      "x": 993,
      "y": 182.5,
      "width": 610,
      "height": 816,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1968346535,
      "version": 2607,
      "versionNonce": 682763881,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672402979835,
      "link": null,
      "locked": false,
      "text": "The idea here is to use North, East, South, West\nas directions for where the head/tail is. Most of\nthe time it will be a combination of two of these\nunless the head/tail is directly up, down, left or\nright from the starting point.\n\nFor example:\n\nHead movement/Head square/Tail steps\n\nR4, E4, [E1, E2, E3]\nU4, N4E5, [E4, N2E4, N3E4]\nL3, N4E1, [N4E3, N4E2]\n\nTail has moved 8 Steps so far...\n\n\nConsiderations:\n\n- One downside of this method is how hard it is to\nvisualize what is going on compared to a pre set\ngrid. But hopefully some good thorough tests will\ngive me the confidence\n- It might just be better to have two numbers of x/y\ninstead. With compass directions there will need to\nbe some parsing back and forth anyways for the \ncalculations\n- An accumulative history is needed to keep track\nof places already visited before\n\n\n\n\n",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 811,
      "containerId": null,
      "originalText": "The idea here is to use North, East, South, West\nas directions for where the head/tail is. Most of\nthe time it will be a combination of two of these\nunless the head/tail is directly up, down, left or\nright from the starting point.\n\nFor example:\n\nHead movement/Head square/Tail steps\n\nR4, E4, [E1, E2, E3]\nU4, N4E5, [E4, N2E4, N3E4]\nL3, N4E1, [N4E3, N4E2]\n\nTail has moved 8 Steps so far...\n\n\nConsiderations:\n\n- One downside of this method is how hard it is to\nvisualize what is going on compared to a pre set\ngrid. But hopefully some good thorough tests will\ngive me the confidence\n- It might just be better to have two numbers of x/y\ninstead. With compass directions there will need to\nbe some parsing back and forth anyways for the \ncalculations\n- An accumulative history is needed to keep track\nof places already visited before\n\n\n\n\n"
    },
    {
      "id": "rttr0tS57Yt-X5BuLxI1_",
      "type": "text",
      "x": 1701,
      "y": 108.5,
      "width": 215,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1222594439,
      "version": 429,
      "versionNonce": 858034281,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672405785394,
      "link": null,
      "locked": false,
      "text": "Data Struture",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27,
      "containerId": null,
      "originalText": "Data Struture"
    },
    {
      "id": "LqNW1oWTRg_nMU3bMbJUx",
      "type": "text",
      "x": 1703,
      "y": 176.5,
      "width": 470,
      "height": 600,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1786487113,
      "version": 1425,
      "versionNonce": 1166062535,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672405810832,
      "link": null,
      "locked": false,
      "text": "We need two objects afaik: Bridge & Rope\n\n// relative x, y positions\ntype Position: [number, number]\n\ninterface Rope {\n    head: Position\n    tail: Position[]\n}\n\ninterface Bridge {\n    history: {\n        head: Position[]\n        tail: Position[]\n    }\n    command: {\n        name: string,\n        prevPosition: Rope\n        currentPosition: Rope\n    }\n}\n\n\n\n",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 595,
      "containerId": null,
      "originalText": "We need two objects afaik: Bridge & Rope\n\n// relative x, y positions\ntype Position: [number, number]\n\ninterface Rope {\n    head: Position\n    tail: Position[]\n}\n\ninterface Bridge {\n    history: {\n        head: Position[]\n        tail: Position[]\n    }\n    command: {\n        name: string,\n        prevPosition: Rope\n        currentPosition: Rope\n    }\n}\n\n\n\n"
    },
    {
      "id": "4Xvei0-YOobJttpf_63Wc",
      "type": "text",
      "x": 1705,
      "y": 725.5,
      "width": 68,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 887853961,
      "version": 868,
      "versionNonce": 793862439,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672405852610,
      "link": null,
      "locked": false,
      "text": "Plan",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27,
      "containerId": null,
      "originalText": "Plan"
    },
    {
      "id": "leDWlGu_TwtVPoEvNr__P",
      "type": "text",
      "x": 1704,
      "y": 775.5,
      "width": 657,
      "height": 144,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1890285415,
      "version": 2149,
      "versionNonce": 1452356231,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1672405973952,
      "link": null,
      "locked": false,
      "text": "1. Initial code setup, write out master function in\nsudo code then comment out steps to do one at a time\n2. Write test for each function starting from smallest\nusing the example dataset\n3. Implement code once passing. Remember to break things\ndown even further if needed! ",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 139,
      "containerId": null,
      "originalText": "1. Initial code setup, write out master function in\nsudo code then comment out steps to do one at a time\n2. Write test for each function starting from smallest\nusing the example dataset\n3. Implement code once passing. Remember to break things\ndown even further if needed! "
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}