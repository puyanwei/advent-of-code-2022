{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 1978,
      "versionNonce": 1983370506,
      "isDeleted": false,
      "id": "s_TwhujoaDF7jOFzr3MEb",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -193.91666666666697,
      "y": -1350.1666666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 323,
      "height": 27,
      "seed": 882955799,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152249267,
      "link": null,
      "locked": false,
      "fontSize": 19.951338199513387,
      "fontFamily": 3,
      "text": "Day 8 Part One - Treetop Tree House",
      "baseline": 22,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Day 8 Part One - Treetop Tree House"
    },
    {
      "type": "text",
      "version": 2024,
      "versionNonce": 161699990,
      "isDeleted": false,
      "id": "FNOPj5OZJ4y3aGA1RVMdu",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -216.91666666666697,
      "y": -1301.1666666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 567,
      "height": 135,
      "seed": 1337877561,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152249267,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "- Height of trees is between 0-9\n- Visible trees are only seen if there is no taller tree in front of it, \n  meaning the tree is not visible \n\n",
      "baseline": 130,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "- Height of trees is between 0-9\n- Visible trees are only seen if there is no taller tree in front of it, \n  meaning the tree is not visible \n\n"
    },
    {
      "type": "text",
      "version": 2845,
      "versionNonce": 1464640458,
      "isDeleted": false,
      "id": "fb2etL8P4qsqDxeLcRoOE",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -196.91666666666697,
      "y": -1218.1666666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 774,
      "height": 312,
      "seed": 1217106135,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152249267,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Tree B2 is visible from left and top\nTree C2 is visible from right and top\nTree D2 is not visible\nTree B3 is visible from right\nTree C3 is not visible\nTree D3 is visible from right\nTree B4 is not visible\nTree C4 is visible from left and bottom\nTree D4 is not visible \n\nWith 16 trees visible on the edge and another 5 visible in\nthe interior, a total of 21 trees are visible in this arrangement.\n",
      "baseline": 307,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Tree B2 is visible from left and top\nTree C2 is visible from right and top\nTree D2 is not visible\nTree B3 is visible from right\nTree C3 is not visible\nTree D3 is visible from right\nTree B4 is not visible\nTree C4 is visible from left and bottom\nTree D4 is not visible \n\nWith 16 trees visible on the edge and another 5 visible in\nthe interior, a total of 21 trees are visible in this arrangement.\n"
    },
    {
      "type": "text",
      "version": 3277,
      "versionNonce": 202888662,
      "isDeleted": false,
      "id": "vc-B1XU__2g5VxUJc1lVh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -192.91666666666697,
      "y": -863.2111111111109,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 845,
      "height": 624,
      "seed": 570048727,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152249267,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Assumptions\n\n1. Outer ring of trees is always counted and added to total. So need \nto start current tree inwards from the border of trees\n2. If any tree can be seen from any direction then it counts as seen\nand the algorthm can stop looking from other directions. Start from \nshortest number of trees towards outer.\n3. If any tree is bigger than the selected tree in any direction then\nit blocks its view and is not seen\n\nAre there any \"shortcuts\" that we can take which still make the \ntree visibility problem true?\n\n- A tree with 9 height will always be blocking any other trees\nthat are in its row or columns\n- If current tree has a height of 9 and there are no other 9s then\nit is visible\n- Conversely if tree has height of 1 and there's no other 1s then it\nwill never be shown\n\n- Is there a way of flipping the data array of arrays so that columns \nbecome rows so that the arrays can be iterated through more easily?\n\n- Iterating through the shorter arrays would be more efficient as if any\nare found true you would stop iterating.\n",
      "baseline": 619,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assumptions\n\n1. Outer ring of trees is always counted and added to total. So need \nto start current tree inwards from the border of trees\n2. If any tree can be seen from any direction then it counts as seen\nand the algorthm can stop looking from other directions. Start from \nshortest number of trees towards outer.\n3. If any tree is bigger than the selected tree in any direction then\nit blocks its view and is not seen\n\nAre there any \"shortcuts\" that we can take which still make the \ntree visibility problem true?\n\n- A tree with 9 height will always be blocking any other trees\nthat are in its row or columns\n- If current tree has a height of 9 and there are no other 9s then\nit is visible\n- Conversely if tree has height of 1 and there's no other 1s then it\nwill never be shown\n\n- Is there a way of flipping the data array of arrays so that columns \nbecome rows so that the arrays can be iterated through more easily?\n\n- Iterating through the shorter arrays would be more efficient as if any\nare found true you would stop iterating.\n"
    },
    {
      "type": "text",
      "version": 1880,
      "versionNonce": 1113168522,
      "isDeleted": false,
      "id": "Sa1VIzU3bpe2oKxSpqXm4",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 376.08333333333303,
      "y": -1196.1666666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 73,
      "height": 162,
      "seed": 1843371545,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152249267,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "  ABCDE\n1 30373\n2 25512\n3 65332\n4 33549\n5 35390",
      "baseline": 157,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "  ABCDE\n1 30373\n2 25512\n3 65332\n4 33549\n5 35390"
    },
    {
      "type": "text",
      "version": 3155,
      "versionNonce": 1393255894,
      "isDeleted": false,
      "id": "vbJdzAg-Tpw6J0V4iHNf6",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 720.333333333333,
      "y": -1343.6666666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 774,
      "height": 1008,
      "seed": 1291087193,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152349849,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Data structure\n\nWe want the data structure to help us solve the problem\nin the easiest and most readable way, but also take into\naccount scalability which is what part 2 might as of us\n\nMost Obvious:\n\n// column/row grid in a matrix\ntype Position = [number, number] \n\ninterface Tree {\n    position: Position\n    height: number\n    surroundingTreesHeights {\n        above: number[]\n        right: number[]\n        below: number[]\n        left: number[]\n    }\n}\n\nPutting the surrounding trees in its own object makes it \neasier for iterating over them.\n\nSteps\n1. Tests for initial functions. Use example data.\n\nfunction parseGrid - Passes in the data string and returns it\nin the Forest type above\n\nfunction resolveTree - Passes in Forest & the target tree. Returns\nthe data in the Tree format above \n\n2. Loop through the grid and loop through the \nsurroundingTreeHeights arrays and return a boolean for each\ntree\n\n3. Sum up the visible trees (trees that return true from step 2)\n\n\n ",
      "baseline": 1003,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Data structure\n\nWe want the data structure to help us solve the problem\nin the easiest and most readable way, but also take into\naccount scalability which is what part 2 might as of us\n\nMost Obvious:\n\n// column/row grid in a matrix\ntype Position = [number, number] \n\ninterface Tree {\n    position: Position\n    height: number\n    surroundingTreesHeights {\n        above: number[]\n        right: number[]\n        below: number[]\n        left: number[]\n    }\n}\n\nPutting the surrounding trees in its own object makes it \neasier for iterating over them.\n\nSteps\n1. Tests for initial functions. Use example data.\n\nfunction parseGrid - Passes in the data string and returns it\nin the Forest type above\n\nfunction resolveTree - Passes in Forest & the target tree. Returns\nthe data in the Tree format above \n\n2. Loop through the grid and loop through the \nsurroundingTreeHeights arrays and return a boolean for each\ntree\n\n3. Sum up the visible trees (trees that return true from step 2)\n\n\n "
    },
    {
      "type": "text",
      "version": 2566,
      "versionNonce": 301936918,
      "isDeleted": false,
      "id": "0TlIOJ5AobBJDYUJSGthy",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1118.583333333333,
      "y": -1027.4166666666665,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 282,
      "height": 120,
      "seed": 1567741431,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1672152288655,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "type Forest = [number][]\n\nEach row is an array of \nnumbers. All rows are in\nanother array ",
      "baseline": 115,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "type Forest = [number][]\n\nEach row is an array of \nnumbers. All rows are in\nanother array "
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}